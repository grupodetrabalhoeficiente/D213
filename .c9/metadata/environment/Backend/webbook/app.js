{"filter":false,"title":"app.js","tooltip":"/Backend/webbook/app.js","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":4,"column":0},"end":{"row":8,"column":0},"action":"insert","lines":["require('dotenv').config()","const models=require(\"./models/\");","const passport = require('passport');","const session = require('express-session');",""],"id":2,"ignore":true},{"start":{"row":15,"column":0},"end":{"row":16,"column":2},"action":"remove","lines":["","/*"]},{"start":{"row":15,"column":6},"end":{"row":15,"column":20},"action":"remove","lines":["usercontroller"]},{"start":{"row":15,"column":6},"end":{"row":15,"column":22},"action":"insert","lines":["{login, refresh}"]},{"start":{"row":15,"column":36},"end":{"row":15,"column":45},"action":"remove","lines":["user/user"]},{"start":{"row":15,"column":46},"end":{"row":17,"column":21},"action":"remove","lines":["');*/","","//iniciar a aplicação"]},{"start":{"row":15,"column":46},"end":{"row":16,"column":0},"action":"insert","lines":["s/login.controller.js')",""]},{"start":{"row":22,"column":0},"end":{"row":122,"column":0},"action":"insert","lines":["app.use(cookieParser());","/*                 Login                   */","app.post('/login', login)","app.post('/refresh', refresh)","","","/*exports.login = function(req, res){","const email = req.param('email');","    const post = { email: email };","    const query = connect.con.query('SELECT email FROM login WHERE ?',post, function(err, rows, fields) {","        console.log(query.sql);","        if (err) {","            console.log(err);","            res.status(jsonMessages.db.noRecords.status).send(jsonMessages.db.dbError);","        }","        else {","            if (rows.length == 0) {","                res.status(jsonMessages.db.noRecords.status).send(jsonMessages.db.noRecords);","            }","            else {","                res.send(rows);","            }","        }","    });","    let username = req.body.username","    let password = req.body.password","","    //use the payload to store information about the user such as username, user role, etc.","    let payload = {username: username}","","    //create the access token with the shorter lifespan","    let accessToken = jwt.sign(payload, process.env.ACCESS_TOKEN_SECRET, {","        algorithm: \"HS256\",","        expiresIn: process.env.ACCESS_TOKEN_LIFE","    })","","    //create the refresh token with the longer lifespan","    let refreshToken = jwt.sign(payload, process.env.REFRESH_TOKEN_SECRET, {","        algorithm: \"HS256\",","        expiresIn: process.env.REFRESH_TOKEN_LIFE","    })","","    //store the refresh token in the user array","    users[username].refreshToken = refreshToken","","    //send the access token to the client inside a cookie","    //res.cookie(\"jwt\", accessToken, {secure: true, httpOnly: true})","    res.localStorage.setItem(\"jwt\", accessToken, {secure: true, httpOnly: true})","    res.send()","}","","*/","","","","","","","","","","","/*const usercontroller = require('./user/usercontroller');*/","","","","/*app.set('trust proxy',1);","app.use(session({","    secret: 'fire',","    resave: false,","    saveUninitialized: true,","    cookie: {","        secure: true,","        maxAge: 60000,","        httpOnly: true,","    }","}))","app.use(function(req, res, next) {","    if(global.sessData === undefined) {","        global.sessData = req.session;","        global.sessData.ID = req.sessionID;","    }","    else {","        console.log('session exists', global.sessData.ID);","    }","    next();","});","app.use(passport.initialize());","app.use(passport.session()); // persistent login sessions","require('./routes/auth.js')(app, passport);","require('./config/passport/passport.js')(passport, models.user);","","//Sync Database","models.sequelize.sync().then(function() {","  console.log('Nice! Database looks fine');","","}).catch(function(err) {","  console.log(err, \"Something went wrong with the Database Update!\");","});*/","",""]},{"start":{"row":128,"column":3},"end":{"row":129,"column":0},"action":"insert","lines":["",""]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":0,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1611172995408,"hash":"308ebd38329730a94eb8c562d9e51e6b6826a00e"}