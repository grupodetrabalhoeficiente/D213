{"filter":false,"title":"passport.js","tooltip":"/D213/Backend/webbook/config/passport/passport.js","undoManager":{"mark":11,"position":11,"stack":[[{"start":{"row":0,"column":0},"end":{"row":14,"column":4},"action":"insert","lines":["var passport = require('passport’;","var LocalStrategy = require('passport-local').Strategy;","passport.use(new LocalStrategy(","function (username, password, done) {","User.findOne({ username: username }, function (err, user) {","if (err) {","return done(err);","} if (!user) {","return done(null, false, { message: 'Incorrect username.' }); }","if (!user.validPassword(password)) {","return done(null, false, { message: 'Incorrect password.' });","}","return done(null, user);","});","}));"],"id":1}],[{"start":{"row":0,"column":33},"end":{"row":0,"column":34},"action":"insert","lines":[")"],"id":2}],[{"start":{"row":0,"column":33},"end":{"row":0,"column":34},"action":"remove","lines":[")"],"id":3},{"start":{"row":0,"column":32},"end":{"row":0,"column":33},"action":"remove","lines":["’"]}],[{"start":{"row":0,"column":32},"end":{"row":0,"column":33},"action":"insert","lines":["'"],"id":4},{"start":{"row":0,"column":33},"end":{"row":0,"column":34},"action":"insert","lines":[")"]}],[{"start":{"row":3,"column":0},"end":{"row":3,"column":4},"action":"insert","lines":["    "],"id":5},{"start":{"row":3,"column":12},"end":{"row":3,"column":13},"action":"remove","lines":[" "]},{"start":{"row":4,"column":0},"end":{"row":4,"column":8},"action":"insert","lines":["        "]},{"start":{"row":4,"column":53},"end":{"row":4,"column":54},"action":"remove","lines":[" "]},{"start":{"row":5,"column":0},"end":{"row":5,"column":12},"action":"insert","lines":["            "]},{"start":{"row":6,"column":0},"end":{"row":6,"column":16},"action":"insert","lines":["                "]},{"start":{"row":7,"column":0},"end":{"row":7,"column":12},"action":"insert","lines":["            "]},{"start":{"row":7,"column":13},"end":{"row":8,"column":11},"action":"insert","lines":["","           "]},{"start":{"row":9,"column":0},"end":{"row":9,"column":16},"action":"insert","lines":["                "]},{"start":{"row":9,"column":77},"end":{"row":10,"column":11},"action":"insert","lines":["","           "]},{"start":{"row":11,"column":0},"end":{"row":11,"column":12},"action":"insert","lines":["            "]},{"start":{"row":12,"column":0},"end":{"row":12,"column":16},"action":"insert","lines":["                "]},{"start":{"row":13,"column":0},"end":{"row":13,"column":12},"action":"insert","lines":["            "]},{"start":{"row":14,"column":0},"end":{"row":14,"column":12},"action":"insert","lines":["            "]},{"start":{"row":15,"column":0},"end":{"row":15,"column":8},"action":"insert","lines":["        "]},{"start":{"row":16,"column":0},"end":{"row":16,"column":4},"action":"insert","lines":["    "]},{"start":{"row":16,"column":8},"end":{"row":17,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":0,"column":0},"end":{"row":16,"column":8},"action":"remove","lines":["var passport = require('passport');","var LocalStrategy = require('passport-local').Strategy;","passport.use(new LocalStrategy(","    function(username, password, done) {","        User.findOne({ username: username }, function(err, user) {","            if (err) {","                return done(err);","            }","            if (!user) {","                return done(null, false, { message: 'Incorrect username.' });","            }","            if (!user.validPassword(password)) {","                return done(null, false, { message: 'Incorrect password.' });","            }","            return done(null, user);","        });","    }));"],"id":6},{"start":{"row":0,"column":0},"end":{"row":83,"column":2},"action":"insert","lines":["let bcrypt = require('bcrypt-nodejs');","const jsonMessagesPath = __dirname + \"/../../assets/jsonMessages/\";","let jsonMessages = require(jsonMessagesPath + \"login\");","module.exports = function(passport, user) {","  let User = user;","  let LocalStrategy = require('passport-local').Strategy;","  passport.serializeUser(function(user, done) {","    done(null, user.id);","  });","  // used to deserialize the user","  passport.deserializeUser(function(id, done) {","    User.findById(id).then(function(user) {","      if (user) {","        done(null, user.get());","      }","      else {","        done(user.errors, null);","      }","    });","  });"," /* passport.use('local-signup', new LocalStrategy({","      usernameField: 'email',","      passwordField: 'password',","      passReqToCallback: true // allows us to pass back the entire request to the callback","","    },","    function(req, email, password, done) {","      var generateHash = function(password) {","        return bCrypt.hashSync(password, bCrypt.genSaltSync(8), null);","      };","      User.findOne({ where: { email: email } }).then(function(user) {","        if (user) {","          return done(null, false, jsonMessages.user.duplicate);","        }","        else {","          var userPassword = generateHash(password);","          var data = {","            email: email,","            password: userPassword,","            nome: req.body.firstname,","            apelido: req.body.lastname","          };","          User.create(data).then(function(newUser, created) {","            if (!newUser) {","              return done(null, false);","            }","            if (newUser) {","              return done(null, newUser);","            }","          });","        }","      });","    }","  ));*/","  //LOCAL SIGNIN","  passport.use('local-signin', new LocalStrategy({","      // by default, local strategy uses username and password, we will override with email","      usernameField: 'email',","      passwordField: 'password',","      passReqToCallback: true // allows us to pass back the entire request to the callback","    },","    ","  function(req, email, password, done) {","      var User = user;","      var isValidPassword = function(userpass, password) {","        return bcrypt.compareSync(password,userpass );","","      }","      User.findOne({ where: { email: email } }).then(function(user) {","        if (!user) {","          return done(null, false, jsonMessages.user.email);","        }","        if (!isValidPassword(user.password, password)) {","          return done(null, false, jsonMessages.user.password);","        }","        let userinfo = user.get();","        return done(null, userinfo);","      }).catch(function(err) {","        console.log(\"Error:\", err);","        return done(null, false,  jsonMessages.user.error);","      });","    }","  ));","};"]}],[{"start":{"row":2,"column":55},"end":{"row":3,"column":0},"action":"insert","lines":["",""],"id":7}],[{"start":{"row":21,"column":2},"end":{"row":21,"column":3},"action":"remove","lines":["*"],"id":8},{"start":{"row":21,"column":1},"end":{"row":21,"column":2},"action":"remove","lines":["/"]}],[{"start":{"row":54,"column":6},"end":{"row":54,"column":7},"action":"remove","lines":["/"],"id":9},{"start":{"row":54,"column":5},"end":{"row":54,"column":6},"action":"remove","lines":["*"]}],[{"start":{"row":0,"column":0},"end":{"row":84,"column":2},"action":"remove","lines":["let bcrypt = require('bcrypt-nodejs');","const jsonMessagesPath = __dirname + \"/../../assets/jsonMessages/\";","let jsonMessages = require(jsonMessagesPath + \"login\");","","module.exports = function(passport, user) {","  let User = user;","  let LocalStrategy = require('passport-local').Strategy;","  passport.serializeUser(function(user, done) {","    done(null, user.id);","  });","  // used to deserialize the user","  passport.deserializeUser(function(id, done) {","    User.findById(id).then(function(user) {","      if (user) {","        done(null, user.get());","      }","      else {","        done(user.errors, null);","      }","    });","  });","  passport.use('local-signup', new LocalStrategy({","      usernameField: 'email',","      passwordField: 'password',","      passReqToCallback: true // allows us to pass back the entire request to the callback","","    },","    function(req, email, password, done) {","      var generateHash = function(password) {","        return bCrypt.hashSync(password, bCrypt.genSaltSync(8), null);","      };","      User.findOne({ where: { email: email } }).then(function(user) {","        if (user) {","          return done(null, false, jsonMessages.user.duplicate);","        }","        else {","          var userPassword = generateHash(password);","          var data = {","            email: email,","            password: userPassword,","            nome: req.body.firstname,","            apelido: req.body.lastname","          };","          User.create(data).then(function(newUser, created) {","            if (!newUser) {","              return done(null, false);","            }","            if (newUser) {","              return done(null, newUser);","            }","          });","        }","      });","    }","  ));","  //LOCAL SIGNIN","  passport.use('local-signin', new LocalStrategy({","      // by default, local strategy uses username and password, we will override with email","      usernameField: 'email',","      passwordField: 'password',","      passReqToCallback: true // allows us to pass back the entire request to the callback","    },","    ","  function(req, email, password, done) {","      var User = user;","      var isValidPassword = function(userpass, password) {","        return bcrypt.compareSync(password,userpass );","","      }","      User.findOne({ where: { email: email } }).then(function(user) {","        if (!user) {","          return done(null, false, jsonMessages.user.email);","        }","        if (!isValidPassword(user.password, password)) {","          return done(null, false, jsonMessages.user.password);","        }","        let userinfo = user.get();","        return done(null, userinfo);","      }).catch(function(err) {","        console.log(\"Error:\", err);","        return done(null, false,  jsonMessages.user.error);","      });","    }","  ));","};"],"id":10},{"start":{"row":0,"column":0},"end":{"row":83,"column":2},"action":"insert","lines":["let bcrypt = require('bcrypt-nodejs');","const jsonMessagesPath = __dirname + \"/../../assets/jsonMessages/\";","let jsonMessages = require(jsonMessagesPath + \"login\");","module.exports = function(passport, user) {","  let User = user;","  let LocalStrategy = require('passport-local').Strategy;","  passport.serializeUser(function(user, done) {","    done(null, user.id);","  });","  // used to deserialize the user","  passport.deserializeUser(function(id, done) {","    User.findById(id).then(function(user) {","      if (user) {","        done(null, user.get());","      }","      else {","        done(user.errors, null);","      }","    });","  });"," /* passport.use('local-signup', new LocalStrategy({","      usernameField: 'email',","      passwordField: 'password',","      passReqToCallback: true // allows us to pass back the entire request to the callback","","    },","    function(req, email, password, done) {","      var generateHash = function(password) {","        return bCrypt.hashSync(password, bCrypt.genSaltSync(8), null);","      };","      User.findOne({ where: { email: email } }).then(function(user) {","        if (user) {","          return done(null, false, jsonMessages.user.duplicate);","        }","        else {","          var userPassword = generateHash(password);","          var data = {","            email: email,","            password: userPassword,","            nome: req.body.firstname,","            apelido: req.body.lastname","          };","          User.create(data).then(function(newUser, created) {","            if (!newUser) {","              return done(null, false);","            }","            if (newUser) {","              return done(null, newUser);","            }","          });","        }","      });","    }","  ));*/","  //LOCAL SIGNIN","  passport.use('local-signin', new LocalStrategy({","      // by default, local strategy uses username and password, we will override with email","      usernameField: 'email',","      passwordField: 'password',","      passReqToCallback: true // allows us to pass back the entire request to the callback","    },","    ","  function(req, email, password, done) {","      var User = user;","      var isValidPassword = function(userpass, password) {","        return bcrypt.compareSync(password,userpass );","","      }","      User.findOne({ where: { email: email } }).then(function(user) {","        if (!user) {","          return done(null, false, jsonMessages.user.email);","        }","        if (!isValidPassword(user.password, password)) {","          return done(null, false, jsonMessages.user.password);","        }","        let userinfo = user.get();","        return done(null, userinfo);","      }).catch(function(err) {","        console.log(\"Error:\", err);","        return done(null, false,  jsonMessages.user.error);","      });","    }","  ));","};"]}],[{"start":{"row":20,"column":2},"end":{"row":20,"column":3},"action":"remove","lines":["*"],"id":11},{"start":{"row":20,"column":1},"end":{"row":20,"column":2},"action":"remove","lines":["/"]}],[{"start":{"row":53,"column":6},"end":{"row":53,"column":7},"action":"remove","lines":["/"],"id":12},{"start":{"row":53,"column":5},"end":{"row":53,"column":6},"action":"remove","lines":["*"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":53,"column":5},"end":{"row":53,"column":5},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1611108082910,"hash":"5fc8a1ae76f7cde6c334d622ed2b6e025d7ad0de"}