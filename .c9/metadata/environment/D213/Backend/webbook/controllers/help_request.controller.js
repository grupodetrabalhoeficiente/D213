{"changed":false,"filter":false,"title":"help_request.controller.js","tooltip":"/D213/Backend/webbook/controllers/help_request.controller.js","value":"const http = require('http');\nconst mysql = require('mysql');\nconst connect = require('../config/connect');\nconst express = require('express');\nconst app = express();\n\n//função de leitura que retorna o resultado de witness no callback\nfunction readHelpRequest(req, res) {\n    //criar e executar a query de leitura na BD\n    connect.con.query('SELECT * FROM help_request order by request_id', function(err,\n        rows, fields) {\n        if (!err) {\n            //verifica os resultados se o número de linhas for 0 devolve dados não encontrados, caso contrário envia os resultados (rows).\n            if (rows.length == 0) {\n                res.status(404).send(\"Data not found\");\n            }\n            else {\n                res.status(200).send(rows);\n            }\n        }\n        else\n            console.log('Error while performing Query.', err);\n    });\n}\n\n/*function queryRow(req,res) { // mostra a tabela toda\n    let selectQuery = 'SELECT * FROM ??';\n    let query = mysql.format(selectQuery, ['witness']);\n    connect.con.query(query, (err, data) => {\n        if (err) {\n            console.error(err);\n            return;\n        }\n        // rows fetch\n        console.log(query);\n    });\n}*/\n//função de leitura que retorna o resultado de um iduser\nfunction readIDHelpRequest(req, res) {\n    //criar e executar a query de leitura na BD\n    const request_id = req.sanitize('request_id').escape();\n    const post = {\n        request_id: request_id\n    };\n    connect.con.query('SELECT * from help_request where request_id = ?', post,\n        function(err, rows, fields) {\n            if (!err) {\n                //verifica os resultados se o número de linhas for 0 devolve dados não encontrados, caso contrário envia os resultados (rows).\n                if (rows.length == 0) {\n                    res.status(404).send({\n                        \"msg\": \"data not found\"\n                    });\n                }\n                else {\n                    res.status(200).send(rows);\n                }\n            }\n            else\n                res.status(400).send({\n                    \"msg\": err.code\n                });\n            console.log('Error while performing Query.', err);\n        });\n}\n\n//função de gravação que recebe os 5 parametros\nfunction saveHelpRequest(req, res) {\n    //receber os dados do formuário que são enviados por post\n    const request_id = req.sanitize('request_id').escape();\n    const reason = req.sanitize('reason').escape();\n    var query = \"\";\n    /*var post = {\n        witness_id: witness_id,\n        name: name,\n        email: email,\n        place: place,\n        profession: profession\n    };*/\n    //console.log(\"with hash:\" + hash);\n    query = connect.con.query('INSERT INTO ?? VALUES (?,?)', [\"help_request\", request_id, reason], function(err, rows, fields) {\n        console.log(query.sql);\n        if (!err) {\n            res.status(200).location(rows.insertId).send({\n                \"msg\": \"inserted with success\"\n            });\n            console.log(\"Number of records inserted: \" + rows.affectedRows);\n        }\n        else {\n            if (err.code == \"ER_DUP_ENTRY\") {\n                res.status(409).send({ \"msg\": err.code });\n                console.log('Error while performing Query.', err);\n            }\n            else res.status(400).send({ \"msg\": err.code });\n        }\n    });\n}\n\nfunction updateHelpRequest(req, res) {\n    //receber os dados do formuário que são enviados por post\n    const request_id = req.sanitize('request_id').escape();\n    const reason = req.sanitize('reason').escape();\n    console.log(\"without hahsh:\" + req.body.pass);\n    var query = \"\";\n    /*var update = {\n        witness_id,\n        name,\n        email,\n        place,\n        profession\n    };*/\n    query = connect.con.query('Update ?? SET reason = ? where request_id=?', [\"help_request\", reason], function(err, rows,\n        fields) {\n        console.log(query.sql);\n        if (!err) {\n            console.log(\"Number of records updated: \" + rows.affectedRows);\n            res.status(200).send({ \"msg\": \"update with success\" });\n        }\n        else {\n            res.status(400).send({ \"msg\": err.code });\n            console.log('Error while performing Query.', err);\n        }\n    });\n}\n\n\n//função que apaga todos os dados de um witness\nfunction deleteIDHelpRequest(req, res) {\n    //criar e executar a query de leitura na BD\n    const request_id = req.sanitize('request_id').escape();\n    const post = {\n        request_id: request_id\n    };\n    connect.con.query('DELETE from help_request where request_id = ?', post, function(err, rows, fields) {\n        if (!err) {\n            //verifica os resultados se o número de linhas for 0 devolve dados não encontrados, caso contrário envia os resultados (rows).\n\n            if (rows.length == 0) {\n                res.status(404).send({\n                    \"msg\": \"data not found\"\n                });\n            }\n            else {\n                res.status(200).send({\n                    \"msg\": \"success\"\n                });\n            }\n        }\n        else\n            console.log('Error while performing Query.', err);\n    });\n}\n\n/*function addRow(data) { // controller??\n    let insertQuery = 'INSERT INTO ?? VALUES (?,?,?,?,?)';\n    let query = mysql.format(insertQuery, [\"witness\", data.witness_id, data.name, data.email, data.place, data.profession]);\n    connect.con.query(query, (err, response) => {\n        if (err) {\n            console.error(err);\n            return;\n        }\n        // rows added\n        console.log(response.insertId);\n    });\n}*/\nmodule.exports = {\n    readHelpRequest: readHelpRequest,\n    readIDHelpRequest: readIDHelpRequest,\n    saveHelpRequest: saveHelpRequest,\n    updateHelpRequest: updateHelpRequest,\n    deleteIDHelpRequest: deleteIDHelpRequest,\n};\n","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":1333,"scrollleft":0,"selection":{"start":{"row":91,"column":13},"end":{"row":91,"column":13},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":73,"state":"comment1","mode":"ace/mode/javascript"}},"timestamp":1607914216575}